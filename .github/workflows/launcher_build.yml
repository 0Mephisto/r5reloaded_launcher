name: Launcher

on:
  # This can be used to automatically publish nightlies at UTC nighttime
  schedule:
    - cron: '0 2 * * *' # run at 2 AM UTC
  # This can be used to allow manually triggering nightlies from the web interface
  workflow_dispatch:

jobs:
  nightly:
    name: Deploy Nightly
    runs-on: windows-latest
    permissions: write-all

    steps:
      # Checkout the repository
      - uses: actions/checkout@v4

      # Step 1: Publish
      - name: Publish
        run: dotnet publish ./launcher/launcher.csproj --runtime win-x64 -p:PublishSingleFile=true --self-contained false --framework net8.0-windows7.0

      # Step 2: Upload Build Artifact
      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: Launcher_Artifact
          path: ./launcher/bin/Release/net8.0-windows7.0/win-x64/publish/launcher.exe

      # Step 3: Zip Release
      - name: Zip Release
        uses: vimtor/action-zip@v1.2
        with:
          files: ./launcher/bin/Release/net8.0-windows7.0/win-x64/publish/launcher.exe
          dest: ./launcher-nightly.zip

      - name: Get current date
        id: date
        run: echo "::set-output name=date::$(date +'%Y-%m-%d')"

      # Step 4: Deploy Nightly Release
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: nightly-tag-${{ steps.date.outputs.date }}
          release_name: nightly-release-${{ steps.date.outputs.date }}
          draft: false
          prerelease: true

      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./launcher-nightly.zip
          asset_name: launcher-nightly.zip
          asset_content_type: application/zip
